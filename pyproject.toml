[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vmm-edr-analysis"
dynamic = ["version"]
description = "VirtualBox EDR Malware Analysis System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "zcyberseclab", email = "support@zcyberseclab.com"}
]
maintainers = [
    {name = "zcyberseclab", email = "support@zcyberseclab.com"}
]
keywords = ["malware", "analysis", "edr", "virtualbox", "sysmon", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi==0.104.1",
    "uvicorn==0.24.0",
    "pydantic==2.5.0",
    "pyvmomi==8.0.2.0.1",
    "requests==2.31.0",
    "aiofiles==23.2.1",
    "python-multipart==0.0.6",
    "python-dotenv==1.0.0",
    "loguru==0.7.2",
    "httpx==0.25.2",
    "pyyaml==6.0.1",
    "pytz==2023.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0",
    "isort>=5.0",
    "flake8>=6.0",
    "bandit>=1.7",
    "safety>=2.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/zcyberseclab/vmm"
Repository = "https://github.com/zcyberseclab/vmm"
Documentation = "https://github.com/zcyberseclab/vmm#readme"
"Bug Reports" = "https://github.com/zcyberseclab/vmm/issues"
Changelog = "https://github.com/zcyberseclab/vmm/releases"

[project.scripts]
vmm-server = "main:main"

[tool.setuptools.dynamic]
version = {attr = "app.__version__"}

[tool.setuptools.packages.find]
include = ["app*"]

[tool.setuptools.package-data]
app = [
    "services/windows/sysmon/configs/*.xml",
    "services/windows/sysmon/scripts/*.py",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]
